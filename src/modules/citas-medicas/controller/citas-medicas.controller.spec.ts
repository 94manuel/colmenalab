// Generated by CodiumAI

import { NotFoundException } from "@nestjs/common";
import { CitasMedicasController } from "./citas-medicas.controller";
import { CreateCitaMedicaDto } from "../dto/create-cita-medica.dto";
import { Paciente } from "src/modules/pacientes/paciente.entity";
import { Medico } from "src/modules/medicos/medico.entity";
import { CitaMedica } from "../citas-medicas.entity";
import { CitasMedicasService } from "../service/citas-medicas.service";
import { Test, TestingModule } from "@nestjs/testing";
import { UpdateCitaMedicaDto } from "../dto/update-cita-medica.dto";

describe('CitasMedicasController', () => {
    let controller: CitasMedicasController;
    let service: jest.Mocked<CitasMedicasService>;
  
    beforeEach(async () => {
      const module: TestingModule = await Test.createTestingModule({
        controllers: [CitasMedicasController],
        providers: [
          {
            provide: CitasMedicasService,
            useValue: {
              create: jest.fn(),
              findAll: jest.fn(),
              findOne: jest.fn(),
              update: jest.fn(),
              remove: jest.fn(),
              // Agrega aquí cualquier otro método que necesites mockear
            },
          },
        ],
      }).compile();
  
      controller = module.get<CitasMedicasController>(CitasMedicasController);
      service = module.get(CitasMedicasService) as jest.Mocked<CitasMedicasService>;
    });

    it('should return an array of citas medicas', async () => {
        service.findAll.mockResolvedValue([]);
        const result = await controller.findAll();
        expect(result).toEqual([]);
        expect(service.findAll).toHaveBeenCalled();
    });

    it('should return a single cita medica', async () => {
        const citaMedica = new CitaMedica();
        service.findOne.mockResolvedValue(citaMedica);
        const result = await controller.findOne(1);
        expect(result).toEqual(citaMedica);
        expect(service.findOne).toHaveBeenCalledWith(1);
    });

    it('should update a cita medica', async () => {
        const citaMedica = new CitaMedica();
        const updateCitaMedicaDto = new UpdateCitaMedicaDto();
        service.update.mockResolvedValue(citaMedica);
        const result = await controller.update(1, updateCitaMedicaDto);
        expect(result).toEqual(citaMedica);
        expect(service.update).toHaveBeenCalledWith(1, updateCitaMedicaDto);
    });

    it('should remove a cita medica', async () => {
        service.remove.mockResolvedValue(undefined);
        await controller.remove(1);
        expect(service.remove).toHaveBeenCalledWith(1);
    });
});
